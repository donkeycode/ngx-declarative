{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface DllPackageConfig {\n  name: string;\n  path: string;\n}\n\nexport interface DllBundleConfig {\n  name: string;\n  packages: Array<string | DllPackageConfig>;\n}\n\n\nexport interface DllBundlesPluginOptions {\n  bundles: { [key: string]: Array<string | DllPackageConfig>}\n\n  /**\n   * Webpack configuration object.\n   * Can be a path, an config object or a config object factory\n   *\n   * If the path (string) is relative, resolved using the context option.\n   */\n  webpackConfig: string | any;\n\n  /**\n   * The directory to store bundles and metadata it.\n   *\n   * If not absolute context is process.cwd()\n   */\n  dllDir: string;\n\n\n  /**\n   * If true will ignore any errors resulted from package resolution.\n   * Such errors can be name mismatch, packages not found, package.json not found etc...\n   *\n   * Error resolution errors does not mean a bundle can not build, if the package exists it will build.\n   * These errors mean that there was no exact match so the build state is not known and as a result\n   * the next check will result in a rebuild. If a package error is not fixed it essentially means that\n   * the bundle will build every time, no caching.\n   *\n   * When using node modules as packages in the bundle this should be left FALSE.\n   * When using a path to a file/directory that is part of the project or does not have package.json file next to it then\n   * you should set this value to TRUE. (read comment below)\n   *\n   * > Having files within the project as packages inside a DLL bundle is possible but not recommended.\n   * It is difficult to detect changes in the tree created by the file so `DllBundlesPlugin` will ignore it\n   * making it appear as \"changed\" for every check for updates in the bundle hence re-building the DLL bundle every time.\n   * Using the plugin with such behaviour makes no sense, make sure to add a \"package.json\" file next\n   * to the file you reference as well as update it's version on every change.\n   *\n   * > While setting ignorePackageError to TRUE will not throw if a package was not found Webpack will.\n   *\n   * @default false\n   */\n  ignorePackageError?: boolean\n\n  /**\n   * The context for the plugin.\n   *\n   * Used as context for internal plugins, e.g: DllReferencePlugin\n   * Used as context for dllDir (if relative)\n   *\n   * @default process.cwd()\n   */\n  context?: string;\n}\n"]}