{"version":3,"file":"RouteModule.js","sourceRoot":"","sources":["../../src/RouteModule.ts"],"names":[],"mappings":";AAAA,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5C,2BAA6B;AAC7B,qCAAgG;AAEhG;IAoBE,0BAAoB,gBAAwB,EAAU,kBAA0B,EAAU,KAA0B;QAAhG,qBAAgB,GAAhB,gBAAgB,CAAQ;QAAU,uBAAkB,GAAlB,kBAAkB,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAqB;QAC5G,IAAA,gCAA2E,EAAzE,kBAAU,EAAE,iBAAS,CAAqD;QAC5E,IAAA,oHAIL,EAJO,kBAAM,EAAE,wBAAS,EAAE,sBAAQ,CAIjC;QAEF,IAAI,CAAC,OAAO,GAAG;YACb,MAAM,EAAE,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM;YAC1D,SAAS,WAAA;YACT,QAAQ,EAAE,OAAO,QAAQ,KAAK,SAAS,GAAG,QAAQ,GAAG,KAAK,CAAC,QAAQ;SACpE,CAAC;QAEF,oCAAoC;QAC9B,IAAA,sCAAgF,EAA9E,gBAAQ,EAAE,kBAAU,CAA2D;QAEvF,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,SAAS,CAAC;QAE1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAE9C,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACpD,wDAAwD;QACxD,IAAI,CAAC,QAAQ,GAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAEtD,CAAC;IAEO,sCAAW,GAAnB,UAAoB,YAAY;QAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAE7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC;IACH,uBAAC;AAAD,CAAC,AAtDD,IAsDC;AAtDY,4CAAgB","sourcesContent":["const loaderUtils = require('loader-utils');\nimport * as path from 'path';\nimport { RouteResourceOptions, RouterLoaderOptions, DEFAULT_RESOURCE_OPTIONS } from './options';\n\nexport class RouteDestination {\n  readonly options: RouteResourceOptions;\n\n  /**\n   * The absolute file path to the destination from the import.\n   */\n  readonly filePath: string;\n  readonly moduleName: string;\n  readonly rawFilePath: string;\n\n  /**\n   * If true the source resource is a angular compiler compiled module (ngFactory).\n   */\n  readonly isCompiled: boolean;\n\n  /**\n   * If true the original (raw) file path is a relative path.\n   */\n  readonly isRawRelative: boolean;\n\n  constructor(private loadChildrenPath: string, private sourceResourcePath: string, private query: RouterLoaderOptions) {\n    const [ pathString, pathQuery ] = loadChildrenPath.split('?') as [string, string];\n    const { loader, chunkName, bySymbol } = Object.assign(\n      {},\n      DEFAULT_RESOURCE_OPTIONS,\n      loaderUtils.parseQuery(pathQuery ? '?' + pathQuery : '')\n    );\n\n    this.options = {\n      loader: typeof loader === 'string' ? loader : query.loader,\n      chunkName,\n      bySymbol: typeof bySymbol === 'boolean' ? bySymbol : query.bySymbol\n    };\n\n    // split the string on the delimiter\n    const [ filePath, moduleName ] = pathString.split(query.delimiter) as [string, string];\n\n    this.rawFilePath = filePath;\n    this.moduleName = moduleName || 'default';\n\n    this.isCompiled = this.getFilename(sourceResourcePath).endsWith(query.moduleSuffix);\n    this.isRawRelative = filePath.startsWith('.');\n\n    const currentDir = path.dirname(sourceResourcePath);\n    // the absolute path of our destenation NgModule module.\n    this.filePath =  path.resolve(currentDir, filePath);\n\n  }\n\n  private getFilename(resourcePath): string {\n    const filename = path.basename(resourcePath);\n\n    return path.basename(resourcePath, path.extname(filename));\n  }\n}\n"]}