{"version":3,"file":"Loader.js","sourceRoot":"","sources":["../../src/Loader.ts"],"names":[],"mappings":"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","sourcesContent":["const loaderUtils = require('loader-utils');\nimport * as os from 'os';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { loader } from 'webpack';\n\nimport { RouterLoaderOptions, RouteResourceOptions, DEFAULT_OPTIONS } from './options';\nimport { RouteDestination } from './RouteModule';\nimport { createTransformerController } from './ast';\n\nexport interface ReplaceResult {\n  /**\n   * The resolved path\n   */\n  filePath: string;\n\n  /**\n   * The NgModule property on the resolved module\n   */\n  moduleName: string;\n\n  /**\n   * The RESOURCE query used to resolve the module.\n   * Note: This is the query defined on the URI used in \"loadChildren\", not the global query.\n   */\n  resourceQuery: RouteResourceOptions;\n\n  /**\n   * The content remove from the source file.\n   */\n  match: string;\n\n  /**\n   * The content inserted into the source file.\n   */\n  replacement: string;\n}\n\n/**\n * Loader code generator type, can return the code as string or as an esprima FunctionDeclaration\n */\nexport type  LoaderCodeGen = Function & (\n    ( (file: string, module: string) => string | any )\n  | ( (file: string, module: string, loaderOptions: RouterLoaderOptions) => any )\n  | ( (file: string, module: string, loaderOptions: RouterLoaderOptions, resourceOptions: RouteResourceOptions) => string )\n  )\n\nconst LOAD_CHILDREN_RE = /loadChildren[\\s]*:[\\s]*['|\"].+?['|\"]/;\n\nexport class Loader {\n  public query: RouterLoaderOptions;\n\n  constructor( private webpack: loader.LoaderContext) { }\n\n  replace(source: string): Promise<{ debug: boolean, source: string, results: Array<ReplaceResult> }> {\n    // TODO: Check what is faster: match -> match found -> AST    OR just AST for all modules.\n    const match = LOAD_CHILDREN_RE.exec(source);\n\n    // let match = source.match(/loadChildren[\\s]*:[\\s]*['|\"](.*?)['|\"]/);\n    if (match) {\n      this.query = Object.assign({}, DEFAULT_OPTIONS, loaderUtils.parseQuery(this.webpack.query));\n      const transformController = createTransformerController(source);\n\n      const promises = transformController.transformers\n        .map(exp => this.replaceSource(exp.expLiteral, exp.expLiteral)\n          .then( result => {\n            result.replacement = exp.transform(result.replacement);\n            return result;\n          })\n      );\n\n      return Promise.all(promises)\n        .then( results => {\n          return {\n            debug: typeof this.query.debug !== 'boolean' ? this.webpack.debug : this.query.debug,\n            source: transformController.getCode(!this.query.inline),\n            results\n          }\n        });\n    } else {\n      return Promise.resolve({source, results: []});\n    }\n  }\n\n  private resolve(context: string, resourceUri: string): Promise<string> {\n    return new Promise<string>( (resolve, reject) => {\n      this.webpack.resolve(context, resourceUri, (err, fullPath) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(fullPath);\n        }\n      });\n    });\n  }\n\n  private replaceSource(match: string, loadChildrenPath: string): Promise<ReplaceResult> {\n    const route = new RouteDestination(loadChildrenPath, this.webpack.resourcePath, this.query);\n\n    const codeGen = Loader.LOADER_CODEGEN_MAP.get(route.options.loader);\n    if (!codeGen) {\n      return Promise.reject(new Error(`ng-router-loader - Invalid code generator \"${route.options.loader}\"`));\n    }\n\n    let context: string = !route.isRawRelative || !route.isCompiled\n      ? path.dirname(this.webpack.resourcePath)\n      : path.dirname(this.genDirToSourceTree(this.webpack.resourcePath))\n    ;\n\n    return this.resolve(context, route.rawFilePath)\n      .then( (filePath) => {\n        let moduleName = route.moduleName;\n\n        // update the file path for non-ngfactory files\n        if (this.query.aot) {\n          filePath = this.sourceTreeToGenDir(filePath);\n          filePath = filePath.substr(0, filePath.lastIndexOf('.'));\n\n          if (route.options.bySymbol) {\n            filePath = this.trackSymbolRootDecl(filePath, route.moduleName);\n          }\n\n          filePath = filePath + this.query.moduleSuffix;\n          moduleName = moduleName + this.query.factorySuffix;\n        } else {\n          filePath = filePath.substr(0, filePath.lastIndexOf('.'));\n        }\n\n        filePath = this.normalize(filePath);\n\n        const replacement = (codeGen as any)(filePath, moduleName, this.query, route.options);\n\n        return {\n          filePath,\n          moduleName,\n          resourceQuery: route.options,\n          match,\n          replacement\n        }\n      });\n  }\n\n  private normalize(filePath: string): string {\n    let normalizedPath = path.normalize(filePath);\n\n    if (os.platform() === 'win32') {\n      normalizedPath = normalizedPath.replace(/\\\\/g, '\\\\\\\\');\n    }\n\n    return normalizedPath;\n  }\n\n  private trackSymbolRootDecl(absPath: string, moduleName: string): string {\n    const summarySuffix = '.ngsummary.json';\n\n    if (absPath.endsWith(summarySuffix)) {\n      const summary = require(absPath);\n      const symbols = summary.symbols\n        .filter( s => s.name === moduleName)\n        .filter( s => summary.summaries.some( ss => ss.metadata.__symbol === s.__symbol ) );\n\n      const m = symbols[0];\n      let filePath = m.filePath.replace(/^(.*)\\.d\\.ts$/, '$1');\n      return this.trackSymbolRootDecl(this.sourceTreeToGenDir(filePath), moduleName);\n    } else if (fs.existsSync(absPath + this.query.moduleSuffix + '.ts')) {\n      return absPath;\n    } else {\n      return this.trackSymbolRootDecl(absPath + summarySuffix, moduleName);\n    }\n  }\n\n  /**\n   * Convert a source tree file path into a it's genDir representation\n   * this only change the path to the file, not the file iteself (i.e: suffix)\n   * @param absFilePath\n   * @returns {string}\n   */\n  private sourceTreeToGenDir(absFilePath: string): string {\n    if (this.query.genDir && this.query.genDir !== '.') {\n      const relativeNgModulePath = path.relative(process.cwd(), absFilePath);\n      return path.join(path.resolve(process.cwd(), this.query.genDir), relativeNgModulePath);\n    } else {\n      return absFilePath;\n    }\n  }\n\n  private genDirToSourceTree(absFilePath: string): string {\n    if (this.query.genDir && this.query.genDir !== '.') {\n      const relativeNgModulePath = path.relative(path.resolve(process.cwd(), this.query.genDir), absFilePath);\n      return path.join(process.cwd(), relativeNgModulePath);\n    } else {\n      return absFilePath;\n    }\n  }\n\n  static setCodeGen(name: string, codeGen: LoaderCodeGen): void {\n    Loader.LOADER_CODEGEN_MAP.set(name, codeGen);\n  }\n  static LOADER_CODEGEN_MAP = new Map<string, LoaderCodeGen>();\n}\n"]}