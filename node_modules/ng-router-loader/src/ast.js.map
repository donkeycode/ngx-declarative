{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../src/ast.ts"],"names":[],"mappings":"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","sourcesContent":["const recast = require(\"recast\");\nconst n = recast.types.namedTypes;\nconst b = recast.types.builders;\n\nfunction isStringTree(value: any /* Expression | Pattern */): boolean {\n  return n.Literal.check(value) || n.BinaryExpression.check(value) || n.TemplateElement.check(value);\n}\n/**\n * Resolves a string expression from an AST property value.\n * Supports Literal, BinaryExpression and TemplateLiteral instructions.\n * BinaryExpression and TemplateLiteral are supported if their internal instructions are Literal only.\n * @param value\n * @returns string\n */\nfunction resolveStringValue(value: any /* Expression | Pattern */): string {\n  if (n.Literal.check(value)) {\n    return value.value;\n  } else if (n.BinaryExpression.check(value) && value.operator === '+') {\n    return resolveStringValue(value.left) + resolveStringValue(value.right);\n  } else if (n.TemplateElement.check(value)) {\n    return value.value.cooked;\n  } else if (n.TemplateLiteral.check(value)) {\n    const vals = [], len = value.expressions.length;\n    let i = 0;\n\n    for (i; i<len; i++) {\n      vals.push(resolveStringValue(value.quasis[i]));\n      vals.push(resolveStringValue(value.expressions[i]));\n    }\n    vals.push(resolveStringValue(value.quasis[i]));\n\n    return vals.join('');\n  }\n  else {\n    throw new Error(`Can't resolve static string. Type ${value.type} is not allowed.`);\n  }\n}\n\nexport interface RouteModuleTransformerController {\n  transformers: Array<{\n    expLiteral: string,\n    transform: (fnCode: string | any) => string\n  }>,\n  getCode: (pretty: boolean) => string\n}\n\nexport function createTransformerController(source: string): RouteModuleTransformerController {\n  const ast = recast.parse(source, { ecmaVersion: 5, sourceType: 'module'});\n\n  const routeModuleTransformer: RouteModuleTransformerController = {\n    transformers: [],\n    getCode(pretty: boolean): string {\n      if (pretty) {\n        return recast.prettyPrint(ast).code\n      } else {\n        return recast.print(ast).code\n      }\n    }\n  };\n\n  recast.visit(ast, {\n    visitProperty: function(path) {\n      if (n.Identifier.check(path.value.key) && path.value.key.name === 'loadChildren' && isStringTree(path.value.value) ) {\n        routeModuleTransformer.transformers.push({\n          expLiteral: resolveStringValue(path.value.value),\n          transform(fnCode: string | any /* FunctionDeclaration */): string {\n\n            const fnDec = typeof fnCode === 'string' ?\n              recast.parse(fnCode, { ecmaVersion: 5, sourceType: 'script'}).program.body[0]\n              : fnCode\n            ;\n\n            n.FunctionDeclaration.assert(fnDec);\n\n            path.value.value = b.functionExpression(\n              null, // Anonymize the function expression.\n              fnDec.params,\n              fnDec.body\n            );\n\n            return recast.print(path.value.value).code;\n          }\n        })\n      }\n      this.traverse(path);\n    }\n  });\n\n  return routeModuleTransformer;\n}"]}