{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";AAAA,qCAAuC;AAEvC,2DAA2D;AAE3D,gBAAgB,MAAM,EAAE,SAAS;IAAjC,iBA4BC;IA3BC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;IAEnC,IAAI,CAAC,KAAK,EAAE,CAAC;IAEb,IAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAElC,IAAI,CAAC;QACH,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;aACd,IAAI,CAAE,UAAA,OAAO;YACZ,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,UAAA,MAAM;gBAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBAClB,IAAM,CAAC,GAAG;wBACR,wFAAwF;wBACxF,kBAAgB,KAAI,CAAC,YAAc;wBACnC,kBAAgB,MAAM,CAAC,KAAO;wBAC9B,kBAAgB,MAAM,CAAC,WAAa;wBACpC,wFAAwF;qBACzF,CAAC;oBACF,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACjD,CAAC,CAAC;aACD,KAAK,CAAE,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAE,CAAC;IACxC,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;AACH,CAAC;AAED,WAAO,MAAM;IAMX;;;;OAIG;IACH,oBAA2B,IAAY,EAAE,OAA6B;QACpE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAFe,iBAAU,aAEzB,CAAA;AACH,CAAC,EAdM,MAAM,KAAN,MAAM,QAcZ;AAED,oCAAiB,CAAC,OAAO,CAAE,UAAC,KAAK,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,EAAnD,CAAmD,CAAE,CAAC;AAE5F,iBAAS,MAAM,CAAC","sourcesContent":["import * as Loader from './src/Loader';\nimport * as options from './src/options';\nimport { BUILT_IN_CODEGENS } from './src/builtin_codegens';\n\nfunction loader(source, sourcemap) {\n  this.cacheable && this.cacheable();\n\n  this.async();\n\n  const l = new Loader.Loader(this);\n\n  try { // l.replace can throw.\n    l.replace(source)\n      .then( results => {\n        results.results.forEach( result => {\n          if (results.debug) {\n            const d = [\n              '================================== ng-router-loader ==================================',\n              `Importer:    ${this.resourcePath}`,\n              `Raw Request: ${result.match}`,\n              `Replacement: ${result.replacement}`,\n              '======================================================================================'\n            ];\n            console.log(d.join('\\n'));\n          }\n        });\n        this.callback(null, results.source, sourcemap);\n      })\n      .catch( err => this.callback(err) );\n  } catch (err) {\n    this.call(err);\n  }\n}\n\nmodule loader {\n  export type ReplaceResult = Loader.ReplaceResult;\n  export type LoaderCodeGen = Loader.LoaderCodeGen;\n  export type RouterLoaderOptions = options.RouterLoaderOptions;\n  export type RouteResourceOptions = options.RouteResourceOptions;\n\n  /**\n   * Add a code generator that can be used in the 'loader' option.\n   * @param name\n   * @param codeGen\n   */\n  export function setCodeGen(name: string, codeGen: Loader.LoaderCodeGen) {\n    Loader.Loader.setCodeGen(name, codeGen);\n  }\n}\n\nBUILT_IN_CODEGENS.forEach( (cgDef) => Loader.Loader.setCodeGen(cgDef.name, cgDef.codeGen) );\n\nexport = loader;\n"]}