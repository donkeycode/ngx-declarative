{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main.ts"],"names":[],"mappings":";;AACA,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE5B,QAAO,kBAAkB,CAAC,CAAA;AAC1B,4BAAiE,sBAAsB,CAAC,CAAA;AACxF,yBAA4B,mBAAoB,CAAC,CAAA;AACjD,6BAAmD,uBAAwB,CAAC,CAAA;AAE5E,gCAA+B,mBAAmB,CAAC,CAAA;AACnD,6DAAwD,gDAAgD,CAAC,CAAA;AAEzG,wBAAwB,cAA8B;IACpD,MAAM,CAAC,UAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI;QAC1C,IAAM,WAAW,GAAwB,IAAI,sFAAuC,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAC3G,MAAM,CAAC,4BAAa,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;IAC3F,CAAC,CAAA;AACH,CAAC;AAED,qBAA4B,OAAe,EAAE,UAAyB,EAAE,OAAuB;IAC7F,MAAM,CAAC,kBAAc,CAAC,OAAO,EAAE,UAAU,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;SAChE,IAAI,CAAE,cAAM,OAAA,OAAO,CAAC,wBAAwB,EAAE,EAAlC,CAAkC,CAAE;SAChD,KAAK,CAAC,UAAA,CAAC;QACN,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,CAAC;IACV,CAAC,CAAC,CAAC;AACP,CAAC;AAPe,mBAAW,cAO1B,CAAA;AAEU,WAAG,GAAG,WAAW,CAAC;AAE7B,cAAqB,IAAS,EAAE,YAAiD;IAAjD,4BAAiD,GAAjD,eAAoC,OAAO,CAAC,KAAK;IAC/E,WAAG,GAAG,CAAE;QACN,MAAM,CAAC,YAAY,CAAC,mKAAmK,CAAC,CAAC;IAC3L,CAAC,CAAS,CAAC;IAEX,IAAM,OAAO,GAAG,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC;IAC9C,IAAM,UAAU,GAAG,IAAI,2BAAa,CAAC,IAAI,CAAC,CAAC;IAE3C,IAAM,OAAO,GAAG,gCAAc,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAExD,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC;SAC7C,IAAI,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC;SACb,KAAK,CAAC,UAAA,CAAC;QACN,EAAE,CAAC,CAAC,CAAC,YAAY,uBAAS,IAAI,CAAC,YAAY,sBAAW,CAAC,CAAC,CAAC;YACvD,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACtB,YAAY,CAAC,oBAAoB,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC,CAAC,CAAC;AACP,CAAC;AAtBe,YAAI,OAsBnB,CAAA;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,QAAgB,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAtB,CAAsB,CAAC,CAAC;AAChE,CAAC","sourcesContent":["#!/usr/bin/env node\nrequire('ts-node/register');\n\nimport 'reflect-metadata';\nimport { main as tscWrappedMain, NgcCliOptions, UserError } from '@angular/tsc-wrapped';\nimport { SyntaxError } from '@angular/compiler' ;\nimport { CodeGenerator, CompilerHostContext } from '@angular/compiler-cli' ;\n\nimport { WebpackWrapper } from './webpack-wrapper';\nimport { WebpackChainModuleResolutionHostAdapter } from './webpack-chain-module-resolution-host-adapter';\n\nfunction codeGenFactory(webpackWrapper: WebpackWrapper) {\n  return (ngOptions, cliOptions, program, host) => {\n    const hostContext: CompilerHostContext = new WebpackChainModuleResolutionHostAdapter(host, webpackWrapper);\n    return CodeGenerator.create(ngOptions, cliOptions, program, host, hostContext).codegen();\n  }\n}\n\nexport function runInternal(project: string, cliOptions: NgcCliOptions, webpack: WebpackWrapper): Promise<any> {\n  return tscWrappedMain(project, cliOptions, codeGenFactory(webpack))\n    .then( () => webpack.emitOnCompilationSuccess() )\n    .catch(e => {\n      webpack.emitOnCompilationError(e);\n      throw e;\n    });\n}\n\nexport let run = runInternal;\n\nexport function main(args: any, consoleError: (s: string) => void = console.error) {\n  run = ( () => {\n    return consoleError('NgcWebpackPlugin is configured for integrated compilation while the compiler executed from the command line, this is not valid. Integrated compilation cancelled.');\n  } ) as any;\n\n  const project = args.p || args.project || '.';\n  const cliOptions = new NgcCliOptions(args);\n\n  const webpack = WebpackWrapper.fromConfig(args.webpack);\n\n  return runInternal(project, cliOptions, webpack)\n    .then(() => 0)\n    .catch(e => {\n      if (e instanceof UserError || e instanceof SyntaxError) {\n        consoleError(e.message);\n        return Promise.resolve(1);\n      } else {\n        consoleError(e.stack);\n        consoleError('Compilation failed');\n        return Promise.resolve(1);\n      }\n    });\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = require('minimist')(process.argv.slice(2));\n  main(args).then((exitCode: number) => process.exit(exitCode));\n}\n"]}