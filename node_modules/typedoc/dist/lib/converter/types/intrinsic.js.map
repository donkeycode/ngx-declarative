{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/intrinsic.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAuD;AACvD,4CAAoF;AAMpF,IAAM,kBAAkB,GAAI,EAAE,CAAC,SAAiB,CAAC,SAAS,CAAC;AAC3D,EAAE,CAAC,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;IACnC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AAC5E,CAAC;AAGD,IAAa,kBAAkB;IAAS,sCAAsB;IAA9D;;IA0BA,CAAC;IArBG,yCAAY,GAAZ,UAAa,OAAe,EAAE,IAAY;QACtC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,CAAC;IAC/C,CAAC;IAeD,wCAAW,GAAX,UAAY,OAAe,EAAE,IAAY;QACrC,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,qBAAa,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;IACL,yBAAC;AAAD,CAAC,AA1BD,CAAwC,mCAAsB,GA0B7D;AA1BY,kBAAkB;IAD9B,sBAAS,CAAC,EAAC,IAAI,EAAC,gBAAgB,EAAC,CAAC;GACtB,kBAAkB,CA0B9B;AA1BY,gDAAkB","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, IntrinsicType} from \"../../models/index\";\nimport {Component, ConverterTypeComponent, ITypeTypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n// TypeScript has an @internal enum set for the intrinsic types:\n// https://github.com/Microsoft/TypeScript/blob/v2.0.5/src/compiler/types.ts#L2297-L2298\n// It is not included in the typescript typings, so the enum is cast as `any` to access the `Intrinsic` set.\nconst IntrinsicTypeFlags = (ts.TypeFlags as any).Intrinsic;\nif (IntrinsicTypeFlags === undefined) {\n    throw new Error(\"Internal TypeScript API missing: TypeFlags.Intrinsic\");\n}\n\n@Component({name:'type:intrinsic'})\nexport class IntrinsicConverter extends ConverterTypeComponent implements ITypeTypeConverter<ts.Type>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.Type):boolean {\n        return !!(type.flags & IntrinsicTypeFlags);\n    }\n\n\n    /**\n     * Convert the given intrinsic type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * ```\n     * var someValue:string;\n     * ```\n     *\n     * @param type  The intrinsic type that should be converted.\n     * @returns The type reflection representing the given intrinsic type.\n     */\n    convertType(context:Context, type:ts.Type):IntrinsicType {\n        let intrinsicName = context.program.getTypeChecker().typeToString(type);\n        return new IntrinsicType(intrinsicName);\n    }\n}\n"]}