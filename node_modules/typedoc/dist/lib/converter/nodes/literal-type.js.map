{"version":3,"file":"literal-type.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/literal-type.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAiC;AAIjC,4CAAgE;AAIhE,IAAa,oBAAoB;IAAS,wCAA0C;IADpF;QAAA,qEA2BC;QArBG,cAAQ,GAAmB;YACvB,EAAE,CAAC,UAAU,CAAC,WAAW;SAC5B,CAAC;;IAmBN,CAAC;IATG,sCAAO,GAAP,UAAQ,OAAe,EAAE,IAAuB;QAAhD,iBAQC;QAPG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,IAAI;gBACtB,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IACL,2BAAC;AAAD,CAAC,AA1BD,CAA0C,mCAAsB,GA0B/D;AA1BY,oBAAoB;IADhC,sBAAS,CAAC,EAAC,IAAI,EAAC,mBAAmB,EAAC,CAAC;GACzB,oBAAoB,CA0BhC;AA1BY,oDAAoB","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:literal-type'})\nexport class TypeLiteralConverter extends ConverterNodeComponent<ts.TypeLiteralNode>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.TypeLiteral\n    ];\n\n\n    /**\n     * Analyze the given type literal node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The type literal node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.TypeLiteralNode):Reflection {\n        if (node.members) {\n            node.members.forEach((node) => {\n                this.owner.convertNode(context, node);\n            });\n        }\n\n        return context.scope;\n    }\n}\n"]}