{"version":3,"file":"literal-object.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/literal-object.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAiC;AAIjC,4CAAgE;AAIhE,IAAa,sBAAsB;IAAS,0CAAkD;IAD9F;QAAA,qEA2BC;QArBG,cAAQ,GAAmB;YACvB,EAAE,CAAC,UAAU,CAAC,uBAAuB;SACxC,CAAC;;IAmBN,CAAC;IATG,wCAAO,GAAP,UAAQ,OAAe,EAAE,IAA+B;QAAxD,iBAQC;QAPG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI;gBACzB,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IACL,6BAAC;AAAD,CAAC,AA1BD,CAA4C,mCAAsB,GA0BjE;AA1BY,sBAAsB;IADlC,sBAAS,CAAC,EAAC,IAAI,EAAC,qBAAqB,EAAC,CAAC;GAC3B,sBAAsB,CA0BlC;AA1BY,wDAAsB","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:literal-object'})\nexport class ObjectLiteralConverter extends ConverterNodeComponent<ts.ObjectLiteralExpression>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.ObjectLiteralExpression\n    ];\n\n\n    /**\n     * Analyze the given object literal node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The object literal node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.ObjectLiteralExpression):Reflection {\n        if (node.properties) {\n            node.properties.forEach((node) => {\n                this.owner.convertNode(context, node);\n            });\n        }\n\n        return context.scope;\n    }\n}\n"]}