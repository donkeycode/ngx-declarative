{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs\";\nimport * as _ from \"lodash\";\nimport * as ts from \"typescript\";\n\nimport {Component, Option} from \"../../component\";\nimport {OptionsComponent, DiscoverEvent} from \"../options\";\nimport {ParameterType, ParameterHint} from \"../declaration\";\nimport {TypeScriptSource} from \"../sources/typescript\";\n\n\n@Component({name:\"options:tsconfig\"})\nexport class TSConfigReader extends OptionsComponent\n{\n    @Option({\n        name: TSConfigReader.OPTIONS_KEY,\n        help: 'Specify a js option file that should be loaded. If not specified TypeDoc will look for \\'typedoc.js\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options:string;\n\n    /**\n     * The name of the parameter that specifies the tsconfig file.\n     */\n    private static OPTIONS_KEY:string = 'tsconfig';\n\n\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\n    }\n\n\n    onDiscover(event:DiscoverEvent) {\n        if (TSConfigReader.OPTIONS_KEY in event.data) {\n            this.load(event, Path.resolve(event.data[TSConfigReader.OPTIONS_KEY]));\n        } else if (this.application.isCLI) {\n            let file:string = ts.findConfigFile(\".\", ts.sys.fileExists);\n            // If file is undefined, we found no file to load.\n            if (file) {\n                this.load(event, file);\n            }\n        }\n    }\n\n\n    /**\n     * Load the specified tsconfig file.\n     *\n     * @param event  The event that triggered the loading. Used to store error messages.\n     * @param fileName  The absolute path and file name of the tsconfig file.\n     */\n    load(event:DiscoverEvent, fileName:string) {\n        if (!FS.existsSync(fileName)) {\n            event.addError('The tsconfig file %s does not exist.', fileName);\n            return;\n        }\n\n        let data = ts.readConfigFile(fileName, ts.sys.readFile).config;\n        if (data === undefined) {\n            event.addError('The tsconfig file %s does not contain valid JSON.', fileName);\n            return;\n        }\n        if (!_.isPlainObject(data)) {\n            event.addError('The tsconfig file %s does not contain a JSON object.', fileName);\n            return;\n        }\n\n        data = ts.parseJsonConfigFileContent(\n            data,\n            ts.sys,\n            Path.resolve(Path.dirname(fileName)),\n            {},\n            Path.resolve(fileName));\n\n        event.inputFiles = data.fileNames;\n\n        const ignored = TypeScriptSource.IGNORED;\n        let compilerOptions = _.clone(data.raw.compilerOptions);\n        for (const key of ignored) {\n            delete compilerOptions[key];\n        }\n\n        _.defaults(event.data, data.raw.typedocOptions, compilerOptions);\n    }\n}\n"]}