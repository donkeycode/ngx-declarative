{"version":3,"file":"typescript.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typescript.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAiC;AACjC,0CAA4C;AAG5C,6CAA0C;AAC1C,sCAA4C;AAC5C,8CAAgG;AAIhG,IAAa,gBAAgB;IAAS,oCAAgB;IAAtD;;IA6EA,CAAC;IA3DG,qCAAU,GAAV;QACI,IAAI,OAAO,GAAG,kBAAgB,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,GAAG,CAAC,CAAoB,UAAsB,EAAtB,KAAA,GAAG,CAAC,kBAAkB,EAAtB,cAAsB,EAAtB,IAAsB;YAAzC,IAAI,WAAW,SAAA;YAChB,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAClC,CAAC;SACJ;IACL,CAAC;IAMD,gDAAqB,GAArB;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAGO,sCAAW,GAAnB,UAAoB,MAA4B;QAC5C,IAAI,KAAK,GAAsB;YAC3B,IAAI,EAAO,MAAM,CAAC,IAAI;YACtB,KAAK,EAAM,MAAM,CAAC,SAAS;YAC3B,IAAI,EAAO,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI;YAC7D,KAAK,EAAM,4BAAc,CAAC,UAAU;YACpC,SAAS,EAAE,IAAI,CAAC,aAAa;SAChC,CAAC;QAEF,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAClB,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,KAAK,CAAC;YACV,KAAK,SAAS;gBACV,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,OAAO,CAAC;gBACnC,KAAK,CAAC;YACV,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,KAAK,CAAC;YACV;gBACI,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,GAAG,CAAC;gBAC/B,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;gBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAClB,IAAI,KAAK,GAAG,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC1D,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,4BAA4B,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAC9E,CAAC;QACT,CAAC;QAED,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,KAAK,GAAG,CAAC,WAAW,CAAC,IAAI;gBACrB,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,IAAI,CAAC;gBAChC,KAAK,CAAC;YACV,KAAK,GAAG,CAAC,WAAW,CAAC,SAAS;gBAC1B,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,SAAS,CAAC;gBACrC,KAAK,CAAC;QACd,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IACL,uBAAC;AAAD,CAAC,AA7ED,CAAsC,0BAAgB,GA6ErD;AAtEU,wBAAO,GAAY;IACtB,KAAK,EAAE,SAAS,EAAE,MAAM;IACxB,OAAO,EAAE,aAAa,EAAE,SAAS;IACjC,WAAW,EAAE,eAAe,EAAE,gBAAgB;IAE9C,KAAK,EAAE,gBAAgB;IACvB,iBAAiB,EAAE,oBAAoB,EAAE,gBAAgB;IACzD,cAAc,EAAE,gBAAgB,EAAE,OAAO,EAAE,WAAW;CACzD,CAAC;AAfO,gBAAgB;IAD5B,qBAAS,CAAC,EAAC,IAAI,EAAC,oBAAoB,EAAC,CAAC;GAC1B,gBAAgB,CA6E5B;AA7EY,4CAAgB","sourcesContent":["import * as ts from \"typescript\";\nimport * as _ts from \"../../../ts-internal\";\n\n\nimport {Component} from \"../../component\";\nimport {OptionsComponent} from \"../options\";\nimport {IOptionDeclaration, ParameterScope, ParameterType, ParameterHint} from \"../declaration\";\n\n\n@Component({name:\"options:typescript\"})\nexport class TypeScriptSource extends OptionsComponent\n{\n    private declarations:IOptionDeclaration[];\n\n    /**\n     * A list of all TypeScript parameters that should be ignored.\n     */\n    static IGNORED:string[] = [\n        'out', 'version', 'help',\n        'watch', 'declaration', 'mapRoot',\n        'sourceMap', 'inlineSources', 'removeComments',\n        // Ignore new TypeScript 2.0 options until typedoc can't manage it.\n        'lib', 'noImplicitThis',\n        'traceResolution', 'noUnusedParameters', 'noUnusedLocals',\n        'skipLibCheck', 'declarationDir', 'types', 'typeRoots'\n    ];\n\n\n    initialize() {\n        var ignored = TypeScriptSource.IGNORED;\n        this.declarations = [];\n\n        for (var declaration of _ts.optionDeclarations) {\n            if (ignored.indexOf(declaration.name) === -1) {\n                this.addTSOption(declaration);\n            }\n        }\n    }\n\n\n    /**\n     * Return all option declarations emitted by this component.\n     */\n    getOptionDeclarations():IOptionDeclaration[] {\n        return this.declarations;\n    }\n\n\n    private addTSOption(option:_ts.CommandLineOption) {\n        var param:IOptionDeclaration = {\n            name:      option.name,\n            short:     option.shortName,\n            help:      option.description ? option.description.key : null,\n            scope:     ParameterScope.TypeScript,\n            component: this.componentName\n        };\n\n        switch (option.type) {\n            case \"number\":\n                param.type = ParameterType.Number;\n                break;\n            case \"boolean\":\n                param.type = ParameterType.Boolean;\n                break;\n            case \"string\":\n                param.type = ParameterType.String;\n                break;\n            default:\n                param.type = ParameterType.Map;\n                param.map = option.type;\n                if (option['error']) {\n                    var error = _ts.createCompilerDiagnostic(option['error']);\n                    param.mapError = ts.flattenDiagnosticMessageText(error.messageText, ', ');\n                }\n        }\n\n        switch (option.paramType) {\n            case _ts.Diagnostics.FILE:\n                param.hint = ParameterHint.File;\n                break;\n            case _ts.Diagnostics.DIRECTORY:\n                param.hint = ParameterHint.Directory;\n                break;\n        }\n\n        this.declarations.push(param);\n    }\n}\n"]}